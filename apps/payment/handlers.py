from aiogram import Router, F, typesfrom aiogram.fsm.context import FSMContextfrom apps.common.exceptions import InvalidRequestExceptionfrom apps.common.settings import settingsfrom apps.core.keyboards import cancelMenuMarkup, startMenuMarkupfrom apps.core.models import Userfrom apps.core.scheme import UserSchemefrom apps.payment.api import createInvoicefrom apps.payment.keyboards import balanceMenuMarkupfrom apps.payment.models import UserPayment, Orderfrom apps.payment.scheme import OrderCreateScheme, InvoiceStatusfrom bot import botfrom db.states import PopupBalanceStatefrom utils import textfrom aiogram.utils.i18n import lazy_gettext as __from aiogram.utils.i18n import gettext as _from utils.events import sendErrorfrom utils.validator import validateAmountpaymentRouter = Router(name="paymentRouter")@paymentRouter.message(F.text == __("ðŸ’° Balans"))async def balanceHandler(message: types.Message):    userPayment = await UserPayment.get(message.from_user.id)    balance = round(userPayment.balance, 2)    return await message.answer(text.BALANCE.format(balance=balance),                                disable_web_page_preview=True,                                reply_markup=balanceMenuMarkup())@paymentRouter.callback_query(F.data == "popup_balance")async def popupBalance(callback_data: types.CallbackQuery, state: FSMContext):    await callback_data.answer("")    await state.set_state(PopupBalanceState.amount)    await bot.send_message(callback_data.from_user.id, text.ENTER_AMOUNT.value, reply_markup=cancelMenuMarkup())@paymentRouter.message(PopupBalanceState.amount)async def processAmount(message: types.Message, state: FSMContext):    try:        amount = validateAmount(amount=message.text)        userPayment = await UserPayment.get(message.from_user.id)        user = await User.get(message.from_user.id)        scheme = OrderCreateScheme(telegramId=message.from_user.id, userPaymentId=userPayment.id,                                   amount=amount, status=InvoiceStatus.NEW)        order = Order(**scheme.model_dump())        await order.save()        response = createInvoice(orderId=order.id, amount=amount, lang=user.languageCode)        order.expirationTime = response.data.expiration_time        order.invoiceId = response.data.invoice_id        await order.save()    except InvalidRequestException as e:        await sendError(text.ERROR_TEMPLATE.format(message=e.exceptionText, telegramId=message.from_user.id))        return await message.answer(e.messageText)    await state.clear()    await bot.send_message(message.from_user.id,                           text.INVOICE_DETAILS.format(amount=amount, invoiceUrl=response.data.invoice_url),                           reply_markup=startMenuMarkup())@paymentRouter.callback_query(F.data == "referral")async def referralHandler(callback: types.CallbackQuery):    await callback.answer("")    telegramId = callback.from_user.id    user = await User.get(telegramId)    userScheme = UserScheme(**user.to_dict())    referralsCount = len(userScheme.referralUsers)    return await bot.send_message(telegramId,                                  text.REFERRAL_INFO.format(botUsername=settings.BOT_USERNAME,                                                            referralPrice=settings.REFERRAL_PRICE,                                                            referralsCount=referralsCount,                                                            referralId=telegramId))