import typesfrom datetime import datetimefrom enum import Enumfrom typing import Optional, List, Anyfrom pydantic import BaseModel, Field, field_validatorimport jsonclass UserPaymentBase(BaseModel):    telegramId: int    userId: int    balance: int = 0    createdAt: datetime = datetime.now()class UserPaymentScheme(UserPaymentBase):    id: intclass UserPaymentCreateScheme(UserPaymentBase):    passclass InvoiceStatus(str, Enum):    NEW = "NEW"    PAID = "PAID"    CONFIRMED = "CONFIRMED"    COMPLETE = "COMPLETE"    EXPIRED = "EXPIRED"    INVALID = "INVALID"class OrderBase(BaseModel):    telegramId: int    userPaymentId: int    amount: float    paidAmount: float = 0.0    paidCryptoAmount: float = 0.0    exchangeRate: float = 0.0    status: InvoiceStatus    createdAt: datetime = datetime.now()class OrderScheme(OrderBase):    id: int    invoiceId: str    cryptoCurrency: str    network: str    errorStatus: str    expirationTime: datetimeclass OrderCreateScheme(OrderBase):    passclass AccountSubscriptionBase(BaseModel):    telegramId: int    accountId: int    isPaid: bool = True    isFreeTrial: bool    currentPeriodStart: datetime = datetime.now()    currentPeriodEnd: datetimeclass AccountSubscriptionScheme(AccountSubscriptionBase):    id: intclass AccountSubscriptionCreateScheme(AccountSubscriptionBase):    pass