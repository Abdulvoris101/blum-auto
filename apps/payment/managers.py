import datetimefrom typing import Listfrom sqlalchemy import select, existsfrom apps.payment.models import AccountSubscriptionfrom apps.payment.scheme import AccountSubscriptionScheme, AccountSubscriptionCreateSchemefrom db.setup import AsyncSessionLocalclass SubscriptionManager:    @classmethod    async def isExistsByAccountId(cls, accountId: int) -> bool:        async with AsyncSessionLocal() as session:            result = await session.execute(select(exists().where(AccountSubscription.accountId == accountId)))            return result.scalar()    @classmethod    async def isExistsBySubscriptionId(cls, subscriptionId: int) -> bool:        async with AsyncSessionLocal() as session:            result = await session.execute(select(exists().where(AccountSubscription.id == subscriptionId)))            return result.scalar()    @classmethod    async def subscribe(cls, telegramId: int, accountId: int, isFreeTrial: bool):        if cls.isExistsByAccountId(accountId):            return        freeTrialEndDate = datetime.datetime.now() + datetime.timedelta(days=3)        monthlyEndDate = datetime.datetime.now() + datetime.timedelta(days=30)        currentPeriodEnd = freeTrialEndDate if isFreeTrial else monthlyEndDate        scheme = AccountSubscriptionCreateScheme(accountId=accountId, telegramId=telegramId,                                                 isFreeTrial=isFreeTrial, currentPeriodEnd=currentPeriodEnd)        subscription = AccountSubscription(**scheme.model_dump())        await subscription.save()