import asyncioimport datetimeimport randomfrom asyncio import sleepfrom datetime import timedeltafrom random import uniformfrom apps.accounts.models import Account, BlumAccountfrom apps.accounts.scheme import Statusfrom apps.core.keyboards import startMenuMarkupfrom apps.core.models import Userfrom apps.core.scheme import FriendBalanceSchemefrom apps.scripts.blum.blum_bot import BlumBotfrom bot import bot, loggerfrom utils import textclass BlumManager:    def __init__(self, account: Account, user: User):        self.account = account        self.user = user        self.sessionName = account.sessionName        self.mainText = text.STARTED_FARMING.format(sessionName=self.sessionName)    def formatDuration(self, seconds):        duration_td = timedelta(seconds=seconds)        hours, remainder = divmod(duration_td.total_seconds(), 3600)        return round(hours, 1)    async def playGame(self, playPasses: int, blum: BlumBot, editMessageId: int, blumAccount: BlumAccount):        playedGames = 1        while playPasses:            if playedGames % 5 == 0:                self.mainText += text.LONG_INTERVAL_GAME.value                await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText, message_id=editMessageId)                await asyncio.sleep(30)            gameId = await blum.startGame()            if not gameId or gameId == "cannot start game":                self.mainText += text.COULD_NOT_PLAY_GAMES.format(playPasses=playPasses, sessionName=self.sessionName)                await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText, message_id=editMessageId)                break            self.mainText += text.PLAYING_GAME.value            await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText, message_id=editMessageId)            await asyncio.sleep(random.uniform(30, 40))            isClaimed, points = await blum.claimGame(gameId)            if not isClaimed:                self.mainText += text.COULD_NOT_PLAY_GAMES.format(playPasses=playPasses)                await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText, message_id=editMessageId)                break            else:                self.mainText += text.SUCCESSFULLY_PLAYED_GAMES.format(points=points)                await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText, message_id=editMessageId)            playedGames += 1            playPasses -= 1            blumAccount.availablePlayPasses -= 1            await self.account.save()            await blumAccount.save()            self.mainText += text.WAIT_UNTIL_NEXT_GAME.value            await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText, message_id=editMessageId)    async def starter(self):        try:            editMessage = await bot.send_message(self.user.telegramId, text.STARTED_FARMING.format(                sessionName=self.sessionName))            editMessageId = editMessage.message_id            blum = BlumBot(sessionName=self.sessionName, proxy=self.account.proxy)            await blum.initWebSession()            await sleep(uniform(5, 15))            await blum.login()            blumAccount = await BlumAccount.createOrGetByAccountId(self.account.id)            balanceScheme = await blum.balance()            friendBalance = await blum.friendBalance()            if await blum.claimDailyReward():                self.mainText += text.DAILY_REWARD_CLAIM.value            else:                self.mainText += text.NO_DAILY_REWARD.value            await bot.edit_message_text(chat_id=self.user.telegramId, text=self.mainText,                                        message_id=editMessageId)            if friendBalance.amountForClaim != 0 and friendBalance.canClaim:                amount = await blum.friendClaim()                self.mainText += text.CLAIMED_FRIENDS_REWARD.format(amount=amount)            else:                self.mainText += text.NO_REWARD_FRIENDS.value            await bot.edit_message_text(text=self.mainText, chat_id=self.user.telegramId,                                        message_id=editMessageId)            if balanceScheme.farming is None:                self.mainText += text.FARMING_STARTED.value                await blum.start()            elif balanceScheme.timestamp >= balanceScheme.farming.endTime:                await blum.refresh()                await blum.claim()                self.mainText += text.TIMER_FARMING_CLAIMED.value                blumAccount.farmingFreezeHours = 8            elif balanceScheme.farming.endTime is not None and balanceScheme.timestamp is not None:                sleep_duration = balanceScheme.farming.endTime - balanceScheme.timestamp                blumAccount.farmingFreezeHours = self.formatDuration(sleep_duration)                self.mainText += text.IN_PROGRESS_FARMING.format(sleepDuration=self.formatDuration(sleep_duration))                await blum.refresh()            self.account.lastUpdated = datetime.datetime.now()            blumAccount.needRemind = True            await blumAccount.save()            await self.account.save()            await bot.edit_message_text(text=self.mainText, chat_id=self.user.telegramId,                                        message_id=editMessageId)            await sleep(uniform(3, 5))            if blumAccount.availablePlayPasses > 0 and balanceScheme.allPlayPasses > 0:                await self.playGame(blumAccount.availablePlayPasses, blum=blum, editMessageId=editMessageId,                                    blumAccount=blumAccount)            else:                self.mainText += text.PLAYING_NOT_AVAILABLE.value                await bot.edit_message_text(text=self.mainText, chat_id=self.user.telegramId,                                            message_id=editMessageId)            balanceScheme = await blum.balance()            blumAccount.availableBalance = float(balanceScheme.availableBalance)            blumAccount.allPlayPasses = balanceScheme.allPlayPasses            blumAccount.status = Status.ACTIVE            self.account.lastUpdated = datetime.datetime.now()            await self.account.save()            await blumAccount.save()            self.mainText += text.FINISHED_FARM.format(availableBalance=balanceScheme.availableBalance,                                                       playPasses=balanceScheme.allPlayPasses)            await bot.edit_message_text(text=self.mainText, chat_id=self.user.telegramId,                                        message_id=editMessageId)        except Exception as e:            logger.error(e)            print(e)            await bot.send_message(self.user.telegramId,                                   text.SOMETHING_WRONG_ON_BLUM.format(sessionName=self.sessionName))